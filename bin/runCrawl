#!/bin/env php
<?php

$base_dir = dirname( __DIR__ );

include $base_dir.'/uk.ac.data.Crawler.php';
	
if(in_array('-v',$argv)){
	$v = true;
}else{
	$v = false;	
}

$cmd = end($argv);

$crawler = new ukacdataCrawler();



$status = "{$base_dir}/var/crawl-status.json";
$stdoutfile = "{$base_dir}/var/crawl-laststdout";
if(file_exists($status)){
	$stat = json_decode(file_get_contents($status),true);
}

if(!isset($stat['lastrun']))
	$stat['lastrun'] = array();

define('TIME_ONEDAY', 24 * 3600);
define('TIME_ONEWEEK', 7 * 4 * 3600);

chdir(__DIR__);

$tasks = array(

	"addDomainsACUK" => array(
		"cmd" => "./addDomainsACUK",
		"every"=> TIME_ONEWEEK,
	),
	"domainCrawl" => array(
		"cmd" => "./domainCrawl",
		"every"=> TIME_ONEWEEK,
	),
	"websiteCrawl" => array(
		"cmd" => "./websiteCrawl",
		"every"=> TIME_ONEWEEK,
	),
	"exportLatestCrawlProfile" => array(
		"cmd" => "./exportLatestCrawlProfile",
		"every"=> TIME_ONEWEEK,
	),
	"syncWebsite" => array(
		"cmd" => "./syncWebsite",
		"every"=> TIME_ONEWEEK,
	),
);

$starttime = time();
$hlog = "";
$log = "";
$div = "=================================================";

if(!in_array($cmd, array("auto", "all")) && !in_array($cmd, array_keys($tasks))){
	die("Usage:\n\trunall [-v] [auto | all | SCRIPTNAME]\n");
}

//last run log
$rlog = "Running Crawl {$cmd}\n";
$rlog .= "Started:".date("r")."\n{$div}\n";

file_put_contents($stdoutfile, $rlog);



if($cmd == "all"){
	$todo = array_keys($tasks);
}elseif($cmd == "auto"){
	$todo = array();
	foreach($tasks as $tk => $task){
		
		if(isset($stat['lastrun'][$tk])){
			$time = (time() - ($task['every'])) + 3600; //Adds an hour so will run every day
			if($time <= $stat['lastrun'][$tk]){
				continue;
			}
		}
		
		$todo[] = $tk;
	}
	
}else{
	$todo = array($cmd);
}

$hlog .= "Running Scripts Summary\n";
$hlog .= "{$div}\n";
$hlog .= "Started: ".date("r\n");

foreach($todo as $key){
	$task = $tasks[$key];

	$tasktime = microtime(true);

	$cmdoutput = NULL;
	$cmdstatus = NULL;


	$rlog ="\n\nRunning: {$key}\nStarted: ".date("r\n")."{$div}\n";
	file_put_contents($stdoutfile, $rlog, FILE_APPEND);


	$descriptorspec = array(
   		0 => array("pipe", "r"),  // stdin is a pipe that the child will read from
   		1 => array("file", $stdoutfile, "a"), // stderr is a file to write to
   		2 => array("pipe", "w"),  // stdout is a pipe that the child will write to
);
	
	$process = proc_open($task['cmd'], $descriptorspec, $pipes);

	if (is_resource($process)) {

	fclose($pipes[0]);
    	$cmdoutput = stream_get_contents($pipes[2]);
    	fclose($pipes[2]);

    	// It is important that you close any pipes before calling
    	// proc_close in order to avoid a deadlock
   	$cmdstatus = proc_close($process);

	}

	$rlog ="\n{$div}\nFinished: ".date("r\n")."\n";
	file_put_contents($stdoutfile, $rlog, FILE_APPEND);
	
	$time = microtime(true) - $tasktime;
	$run = "$key - ".($cmdstatus==0? "OK" : "ERROR({$cmdstatus})"). " - ".time_since($time, true, 2,"","")."\n";
	
	$hlog .= " ".$run;
	
	$log .= "{$div}\n";
	$log .= "Running: {$run}";
	$log .= "Started: ".date("r\n");
	$log .= "{$div}\n";
	
	
	$log .= $cmdoutput."\n";
	
	$log .= "{$div}\n";

	$log .= "Finished: ".date("r\n");
	$log .= "\n\n";
	
	$stat['lastrun'][$key] = $starttime;
}

$hlog .= "Finished: ".date("r"). " - ".time_since(time()-$starttime, true, 2,"","")."\n";
$hlog .= "{$div}\n\n";

echo $hlog;

echo $log;

if(in_array($cmd,array("auto","all"))){
	
	$message = str_replace("\n", "\r\n", $hlog.$log);
	// Send
	mail( join(", ", $crawler->config->crawl->emailTo), 'observatory.data.ac.uk Crawler: '.date("r"), $message);
	
	file_put_contents($status, json_encode($stat));
}





function time_since($since, $short = false, $num = 1, $space = " ", $join = ", ") {
if($since < 1){
	return floor($since * 1000)."ms";
}	
	
$li = "";
$chunks = array(
array(60 * 60 * 24 * 365 , 'year', 'y'),
array(60 * 60 * 24 * 30 , 'month', 'm'),
array(60 * 60 * 24 * 7, 'week', 'w'),
array(60 * 60 * 24 , 'day', 'd'),
array(60 * 60 , 'hour', 'h'),
array(60 , 'minute', 'm'),
array(1 , 'second', 's')
);
$parts = array();
$theone = 0;
for ($i = 0, $j = count($chunks); $i < $j; $i++) {
if ($i) {
$count = floor(($since % $chunks[$i-1][0]) / $chunks[$i][0]);
//$count = floor((($since / $chunks[$i-1][0]) - floor($since / $chunks[$i-1][0])) / $chunks[$i][0]);
} else {
$count = floor(($since) / $chunks[$i][0]);
}
if (!$count) {
continue;
}
$parts[$i] = $count;
if (count($parts) == $num) {
$li = $i;
break;
}
}
 
$key = ($short) ? 2 : 1;
$print = "";
foreach ($parts as $i => $count) {
$print .= $count . $space . $chunks[$i][$key] . (($count == 1 && !$short) ? 's' : '') . (($i != $li) ? $join : '');
}
return $print;
}
